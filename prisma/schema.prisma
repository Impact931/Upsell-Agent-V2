generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  businessName        String
  businessType        String
  role                String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  idealClientProfiles IdealClientProfile[]
  products            Product[]
  trainingMaterials   TrainingMaterial[]
  uploadSessions      UploadSession[]

  @@map("users")
}

model Product {
  id                  String               @id @default(cuid())
  userId              String
  name                String
  description         String
  price               Float
  category            String
  ingredients         String
  benefits            String
  targetAudience      String?
  imageUrl            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  idealClientProfiles IdealClientProfile[]
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingMaterials   TrainingMaterial[]

  @@map("products")
}

model IdealClientProfile {
  id            String   @id @default(cuid())
  productId     String
  userId        String
  title         String
  demographics  String
  painPoints    String
  motivations   String
  preferredTone String
  generatedAt   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("ideal_client_profiles")
}

model TrainingMaterial {
  id          String   @id @default(cuid())
  productId   String
  userId      String
  title       String
  content     String
  type        String
  duration    Int
  generatedAt DateTime
  version     Int      @default(1)
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  targetIcpId String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("training_materials")
}

model UploadSession {
  id            String   @id @default(cuid())
  userId        String
  filename      String
  fileType      String
  fileSize      Int
  status        String   @default("UPLOADING")
  extractedData String?
  errorMessage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("upload_sessions")
}
